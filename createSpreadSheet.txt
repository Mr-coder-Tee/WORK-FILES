=============================BookingService====================================================
    @Secured
    @RolesAllowed({"admin"})
    @GET
    @Path("/oldspreadsheet")
    public Response getOldSpreadsheets(){

        return Response.ok().entity(bookingBean.getOldProcessSpreadSheets()).build();
    }
    @Secured
    @RolesAllowed({"admin"})
    @GET
    @Path("/oldspreadsheet/{sheetOid}")
    public Response getOldSpreadsheet(@PathParam("sheetOid") String sheetOid){
        return Response.ok().entity(bookingBean.getOldSpreadsheet(sheetOid)).build();
    }
//    @Secured
//    @RolesAllowed({"admin"}) ResponseEntity
    @GET
    @Path("/oldspreadsheet/download/{sheetOid}")
    @Produces(MediaType.APPLICATION_OCTET_STREAM)//APPLICATION_OCTET_STREAM
    public Response getDownloadOldSpreadsheet(@PathParam("sheetOid") String sheetOid,@Context HttpServletResponse response){
        try {

            response.setContentType("application/octet-stream");
            response.setHeader("Content-Disposition","attachment; filename=old-payment-spreadsheet.xlsx");
            ByteArrayInputStream   stream=bookingBean.getDownloadOldSpreadsheets2(sheetOid);

            //FileOutputStream file = bookingBean.getDownloadOldSpreadsheets(sheetOid);
            //ResponseBuilder response = Response.ok((Object) file);
            //response.header("Content-Disposition", "attachment; filename=old-payment-spreadsheet.pdf");
//            response.header("Content-Disposition", "attachment; filename=old-payment-spreadsheet.xlsx");
            return Response.ok().build( );
        } catch(IOException e){

            throw new SystemException("Failed to download, " + e.getMessage());
        }
    }


=============================BookingService====================================================



=============================BookingService====================================================

  public List<SpreadSheetDTO> getOldProcessSpreadSheets(){
        logger.info("--------------------- getting old sheets ------------------------");
        List<SpreadSheet> spreadSheetList=persistence().get(SpreadSheet.class);

        if(spreadSheetList.size()==0){
            throw new ClientException("No Spread sheet procesed.");
        }

        List<SpreadSheetDTO>spreadSheetDTOList=new ArrayList<>();
        spreadSheetList.forEach(s->{
            SpreadSheetDTO mapSpreadsheet=dtoMapper().toDTO(SpreadSheetDTO.class,s);
            spreadSheetDTOList.add(mapSpreadsheet);
        });
        logger.info("spreadsheet list "+spreadSheetDTOList);
        return spreadSheetDTOList;
    }