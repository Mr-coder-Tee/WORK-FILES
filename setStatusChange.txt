 public void setStatusChange() throws ParseException {

        List<String> bookingWaybillNo = bookingServiceBean.getAllBookings();
       // List<String> webhookWaybillNo = skynetIntegrationBean.getWaybillNumbers();
        List<String>  response= new ArrayList<>();
        Map<String,String>tracker=new HashMap<>();
        List<String> waybillNumber=new ArrayList<>();


        if(bookingWaybillNo!=null)
        {
            logger.info("=================Number of Bookings to update========" + bookingWaybillNo.size());
            //resp = bookingWaybillNo;
            int length=bookingWaybillNo.size();
            bookingWaybillNo.forEach(c -> {
                if(c.isEmpty()){
                    logger.info("empty way bill");
                }else{
                    tracker.put(c,skynetIntegrationBean.trackWayBillStatus(c));
                    //response.add(skynetIntegrationBean.trackWayBillStatus(c));
                }

            });



           // for(int i = 0; i < 5; i++) {
                //logger.info("==============================Inside for loop =====================");
               // waybillNumber = resp.get(i);
               // waybillNumber.add(bookingWaybillNo.get(i));
                //forwaybill=waybillNumber;

                //skynetIntegrationBean.trackWayBillStatus(bookingWaybillNo.get(i));
               // logger.info("==============================IWaybill Number =====================" + waybillNumber);
           // }
            //List<String> s= skynetIntegrationBean.trackWayBillStatus(waybillNumber);
              /*for(int x= 0; x < waybillNumber.size(); x++){
                 // forwaybill = waybillNumber;
                  forwaybill.add(waybillNumber);
                  List<String> s= skynetIntegrationBean.trackWayBillStatus(forwaybill.toString());
                  response.add(s.toString());
                 }*/


               // logger.info("==============================bookingWaybillNo =====================" + response);
                for(String waybillNum:tracker.keySet()){
                    String skynetres=tracker.get(waybillNum);
                    if(skynetres.equals("POD created") || skynetres.equals("delivered")){
                        Booking booking = bookingDAO().findByWaybillNo(waybillNum);
                        logger.info("==============================Updating Status for=====================" + booking.getTrackNo());
                        booking.setStatus(COMPLETE);
                        persistence().save(booking);
                    }else {
                        logger.info("==============================Not POD created or delivered=====================");
                    }

                }

//                if (response.size()!=0) {
//
//                    response.forEach(c -> {
//                        Booking booking = bookingDAO().findByWaybillNo(c);
//
//                        logger.info("==============================Updating Status for=====================" + booking.getTrackNo());
//                        booking.setStatus(COMPLETE);
//                        persistence().save(booking);
//                    });
//                }
                logger.info("=================Statuses successfully updated========");

            //});

        }else
        {
            logger.info("=================No matching waybillNumbers found========");
        }

        String timeToStart = "00:00:00";
        SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd 'at' HH:mm:ss");
        SimpleDateFormat formatOnlyDay = new SimpleDateFormat("yyyy-MM-dd");
        Date now = new Date();
        Date dateToStart = format.parse(formatOnlyDay.format(now) + " at " + timeToStart);

        logger.info("==============================  dateToStart ===================== " + dateToStart);
        long diff = dateToStart.getTime() - now.getTime();
        if (diff < 0) {
            Date tomorrow = new Date();
            Calendar c = Calendar.getInstance();
            c.setTime(tomorrow);
            c.add(Calendar.DATE, 1);
            tomorrow = c.getTime();
            dateToStart = format.parse(formatOnlyDay.format(tomorrow) + " at " + timeToStart);
            diff = dateToStart.getTime() - now.getTime();
            logger.info("==============================  dateToStart ===================== " + diff);
        }
      /* }else {
           logger.info("Nothing to update");
       }*/

    }